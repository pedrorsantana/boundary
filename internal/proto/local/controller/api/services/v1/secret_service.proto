syntax = "proto3";

package controller.api.services.v1;

option go_package = "github.com/hashicorp/boundary/internal/gen/controller/api/services;services";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "controller/api/resources/secrets/v1/secret.proto";

service SecretService {
    rpc GetSecret(GetSecretRequest) returns (GetSecretResponse) {
        option (google.api.http) = {
            get: "/v1/secrets/{id}",
            response_body: "item"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get a specific secret."
        };   
    }

    rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse) {
        option (google.api.http) = {
            get: "/v1/secrets"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List all secrets."
        };    
    }

    rpc CreateSecret(CreateSecretRequest) returns (CreateSecretResponse) {
        option (google.api.http) = {
            post: "/v1/secrets",
            body: "item",
            response_body: "item"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Creates a single secret."
        };    
    }


    rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse) {
        option (google.api.http) = {
            delete: "/v1/secrets/{id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete a secret."
        };    
    }

    rpc RequestSecretAccess(RequestSecretAccessRequest) returns (RequestSecretAccessResponse) {
        option (google.api.http) = {
            post: "/v1/secret-sessions",
            body: "item",
            response_body: "item"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a request for view the secret."
        };    
    }

    rpc ListSecretSessionEvents(ListSecretSessionEventsRequest) returns (ListSecretSessionEventsResponse) {
        option (google.api.http) = {
            get: "/v1/secret-session-events"
        };
    }

	// Authorize Secret Execution
	rpc AuthorizeSecretSession(AuthorizeSecretSessionRequest) returns (AuthorizeSecretSessionResponse) {
		option (google.api.http) = {
			get: "/v1/secrets/authorize-session"
		};
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			summary: "Authorizes a Session."
		};
	}

    rpc GetSecretSession(GetSecretSessionRequest) returns (GetSecretSessionResponse) {
        option (google.api.http) = {
            get: "/v1/secret-session-logs/{id}"
            response_body: "item"
        };
    }

}

message DeleteSecretRequest {
    //The secret id
    string id = 1;
}

message DeleteSecretResponse {}

message ListSecretSessionEventsRequest {
    repeated string include = 20;
}

message ListSecretSessionEventsResponse {
    repeated resources.secrets.v1.SecretSession items = 1;
}

message GetSecretSessionRequest {
    //The secret Id
    string id = 10;

    string include = 20;
}

message GetSecretSessionResponse {
    resources.secrets.v1.SecretSessionLog item = 1;
}


message AuthorizeSecretSessionRequest {
	//The Id of the session request
	string id = 10;
	//The Id of the secret 
	string secret_id = 20;
    //The User id
    string user_id = 30;
	//The hash of the request approval
	string hash = 40;
}

message AuthorizeSecretSessionResponse {
	string status = 10;
}

message RequestSecretAccessRequest {
    string id = 1;
    resources.secrets.v1.SecretSession item = 2;
}

message RequestSecretAccessResponse {
    resources.secrets.v1.SecretSession item = 2;
}

message GetSecretRequest {
    string id = 1;
}

message GetSecretResponse {
    resources.secrets.v1.Secret item = 1;
}


message CreateSecretRequest {
    resources.secrets.v1.Secret item = 1;
}

message CreateSecretResponse {
    string uri = 1;
    resources.secrets.v1.Secret item = 2;
}

message ListSecretsRequest {
    string scope_id = 1;
}

message ListSecretsResponse {
    repeated resources.secrets.v1.Secret items = 1;
}
